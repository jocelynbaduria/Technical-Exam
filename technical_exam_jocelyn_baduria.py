# -*- coding: utf-8 -*-
"""Technical_Exam_Jocelyn_Baduria.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lHEd1xsrGXBHj_Kp3l5mwAORJD3mzq-q
"""

!pip install datatable

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import datatable as dt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.naive_bayes import GaussianNB
from sklearn.pipeline import make_pipeline

DT = dt.fread('/content/drive/MyDrive/Technical Exam - Senior AI Machine Learning Engineer (2).zip (Unzipped Files)/sentiment_test_cases_1.csv')

data_pd = DT.to_pandas()

#Convert the csv file into pandas dataframe
DT.head()

data_pd.head()

# Pandas read csv not working
# dataset = pd.read_csv("/content/drive/MyDrive/Technical Exam - Senior AI Machine Learning Engineer (2).zip (Unzipped Files)/sentiment_test_cases_1.csv", index_col=0, sep='\t')

# dataset = dataset[["expected_sentiment","text"]]
# dataset["expected_sentiment","text"] = dataset["expected_sentiment","text"].astype(str)
# dataset.head()

# dataset.head()

"""Swap the columns text and expected_sentiment"""

column_names = ['text', 'expected_sentiment']

data_pd = data_pd.reindex(columns=column_names)

print(data_pd)

print(data_pd[0:20])

# Importing LabelEncoder from Sklearn
# library from preprocessing Module.
from sklearn.preprocessing import LabelEncoder

# Creating a instance of label Encoder.
le = LabelEncoder()

# Using .fit_transform function to fit label
# encoder and return encoded label
label = le.fit_transform(data_pd['expected_sentiment'])

# printing label
label

"""Cleaning the text for preparation of sentiment analysis"""

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []

for i in range(0, 498):
  review = re.sub('[^a-zA-Z]', ' ', data_pd['text'][i])
  review = review.lower()
  review = review.split()
  ps = PorterStemmer()
  all_stopwords = stopwords.words('english')
  all_stopwords.remove('not')
  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
  review = ' '.join(review)
  corpus.append(review)

print(corpus[0:5])

"""Creating Bag of Words"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 498)
X = cv.fit_transform(corpus).toarray()
y = data_pd.iloc[:, -1].values

print(X.shape)
print(y.shape)

"""Splitting the Dataset into Taining and test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

"""Training the Naive Bayes model on the Training set"""

model = GaussianNB()
model.fit(X_train, y_train)

"""Predicting the Test set results"""

model_prediction = model.predict(X_test)
print(np.concatenate((model_prediction.reshape(len(model_prediction),1), y_test.reshape(len(y_test),1)),1))

"""Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score, ConfusionMatrixDisplay, f1_score
from sklearn.metrics import classification_report

labels = ["Positive", "Neutral", "Negative"]
cm = confusion_matrix(y_test, model_prediction)

disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels = labels)
disp.plot()

accuracy = accuracy_score(y_test, model_prediction)
f1 = f1_score(model_prediction, y_test, average="weighted")
print("Accuracy:", accuracy)
print("F1 Score:", f1)
print(classification_report(y_test, model_prediction))

"""Model Evaluation using Test Data"""

model_prediction = model.predict([X_test[8]])

print("Actual Value:", data_pd.text[8])
print("Predicted Value:", model_prediction[0])

model_prediction = model.predict([X_test[10]])

print("Actual Value:", data_pd.text[10])
print("Predicted Value:", model_prediction[0])

"""Model Evaluation Using New Data"""

my_sentence = input('')
print((my_sentence, model_prediction[0], "Confidence_Score:", accuracy))

my_sentence = "I love you"
print((my_sentence, model_prediction[0], "Confidence_Score:", accuracy))

my_sentence = "Thats kind of annoying!"
print((my_sentence, model_prediction[0], "Confidence_Score:", accuracy))

my_sentence = "I hate going to that restaurant"
print((my_sentence, model_prediction[0], "Confidence_Score:", accuracy))